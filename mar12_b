// this are all the included libraries for the code

// Adafruit_ICM20X.h: General library for ICM20X series sensors, providing common functionalities.
#include <Adafruit_ICM20X.h>
// Adafruit_ICM20948.h: Specific library for interfacing with the ICM20948 sensor, extends Adafruit_ICM20X for features unique to ICM20948.
#include <Adafruit_ICM20948.h>
// Adafruit_Sensor.h: Base library required for many Adafruit sensors, defines common sensor interfaces and types.
#include <Adafruit_Sensor.h>
// Wire.h: Library for I2C communication, used by sensor libraries to communicate with the ICM20948 and other I2C devices.
#include <Wire.h>
// Adafruit_GFX.h: Base library for Adafruit graphics, provides common graphics functions for displays.
#include <Adafruit_GFX.h>
// Adafruit_SSD1306.h: Specific library for interfacing with the Adafruit SSD1306 OLED display, uses Adafruit_GFX for graphics functions.
#include <Adafruit_SSD1306.h>

#include <math.h>

float pitch;
float roll;

float pitchFiltered_old=0;
float pitchFiltered_new;
float rollFiltered_old=0;
float rollFiltered_new;

float new_weight = 0.2;
float old_weight = 0.8;

float pitchG = 0;
float rollG = 0;

float dt;
unsigned long millis_old;


// Adafruit_ICM20948 icm: Creates an instance of the Adafruit_ICM20948 class. 
// This object will be used to interact with the ICM20948 sensor for operations like initialization, configuration, and reading sensor data.
Adafruit_ICM20948 icm;

// uint16_t measurement_delay_us = 65535: Defines a variable to hold the delay time between sensor measurements in microseconds. 
// This is set to the maximum value for a 16-bit unsigned integer as a placeholder for testing. Adjust this value based on your specific needs for sensor data sampling rate.
uint16_t measurement_delay_us = 65535; // Delay between measurements for testing


//settings for the display
#define SCREEN_WIDTH 128      // OLED display width, in pixels
#define SCREEN_HEIGHT 64      // OLED display height, in pixels
#define OLED_RESET    -1      // Reset pin # (or -1 if sharing Arduino reset pin)

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
//change values of the display


// This function is called once when the sketch starts. It's used to initialize variables, pin modes, start using libraries, etc.
void setup(void) {
  
  // Initializes serial communication at 115200 bits per second.
  Serial.begin(115200);
  // Waits for the serial port to connect. Needed for native USB port only, but used here to ensure serial monitor is open before proceeding.
  while (!Serial)
    delay(10); // will pause Zero, Leonardo, etc until serial console opens

  // Prints a message to the serial monitor indicating the start of the ICM20948 sensor test.
  Serial.println("Adafruit ICM20948 test!");

  // Begins I2C communication. This is essential for communicating with the ICM20948 sensor.
  Wire.begin();

  // Attempts to initialize the ICM20948 sensor over I2C. If unsuccessful, it enters an infinite loop, effectively halting the program.
  if (!icm.begin_I2C()) {
    Serial.println("Failed to find ICM20948 chip");
    while (1) {
      delay(10); // Infinite loop with a small delay, to remain in a safe, low-power state.
    }
  }
  // If initialization is successful, prints a confirmation message.
  Serial.println("ICM20948 Found!");

  // Sets and prints the accelerometer's range to the serial monitor, using a switch statement to handle the different possible ranges.
  Serial.print("Accelerometer range set to: ");
  switch (icm.getAccelRange()) {
    case ICM20948_ACCEL_RANGE_2_G:
      Serial.println("+-2G");
      break;
    case ICM20948_ACCEL_RANGE_4_G:
      Serial.println("+-4G");
      break;
    case ICM20948_ACCEL_RANGE_8_G:
      Serial.println("+-8G");
      break;
    case ICM20948_ACCEL_RANGE_16_G:
      Serial.println("+-16G");
      break;
  }
  Serial.println("OK");

  // Sets and prints the gyroscope's range to the serial monitor, with a similar switch statement for different ranges.
  Serial.print("Gyro range set to: ");
  switch (icm.getGyroRange()) {
    case ICM20948_GYRO_RANGE_250_DPS:
      Serial.println("250 degrees/s");
      break;
    case ICM20948_GYRO_RANGE_500_DPS:
      Serial.println("500 degrees/s");
      break;
    case ICM20948_GYRO_RANGE_1000_DPS:
      Serial.println("1000 degrees/s");
      break;
    case ICM20948_GYRO_RANGE_2000_DPS:
      Serial.println("2000 degrees/s");
      break;
  }
  // Additional sensor configurations and initializations can be added here, following the same pattern of setting a property and then printing a confirmation.



// Retrieves the current accelerometer data rate divisor from the ICM20948 sensor.
// The data rate divisor is a value used to divide a base clock to determine the measurement rate of the accelerometer.
uint16_t accel_divisor = icm.getAccelRateDivisor();

// Calculates the accelerometer data rate (in Hz) using the retrieved divisor.
// The formula 1125 / (1.0 + accel_divisor) is specific to how the ICM20948 sensor calculates its data rate based on the divisor value.
// The base rate (1125 Hz in this case) is divided by the sum of 1 plus the divisor, resulting in the effective data rate.
// This calculation is crucial for understanding how frequently the accelerometer is sampling data.
float accel_rate = 1125 / (1.0 + accel_divisor);


  Serial.print("Accelerometer data rate divisor set to: ");
  Serial.println(accel_divisor);
  Serial.print("Accelerometer data rate (Hz) is approximately: ");
  Serial.println(accel_rate);


// Retrieve the current gyro rate divisor from the ICM20948 sensor.
// This divisor is used to calculate the actual data rate (sampling frequency) of the gyroscope.
// The data rate divisor effectively scales down the base sampling frequency of the gyroscope to a lower value.
uint8_t gyro_divisor = icm.getGyroRateDivisor();

// Calculate the gyroscope's data rate based on the retrieved divisor.
// The formula 1100 / (1.0 + gyro_divisor) is used to calculate the new data rate.
// This is derived from the sensor's specification, where 1100 Hz is a base frequency, and the divisor
// adjusts this frequency to the actual operational data rate. The addition of 1.0 ensures that
// the divisor scales the base rate in a controlled manner, preventing division by zero and allowing
// fine adjustment of the gyroscope's sampling rate.
float gyro_rate = 1100 / (1.0 + gyro_divisor);


  Serial.print("Gyro data rate divisor set to: ");
  Serial.println(gyro_divisor);
  Serial.print("Gyro data rate (Hz) is approximately: ");
  Serial.println(gyro_rate);

  Serial.print("Magnetometer data rate set to: ");
  switch (icm.getMagDataRate()) {
    case AK09916_MAG_DATARATE_SHUTDOWN:
      Serial.println("Shutdown");
      break;
    case AK09916_MAG_DATARATE_SINGLE:
      Serial.println("Single/One shot");
      break;
    case AK09916_MAG_DATARATE_10_HZ:
      Serial.println("10 Hz");
      break;
    case AK09916_MAG_DATARATE_20_HZ:
      Serial.println("20 Hz");
      break;
    case AK09916_MAG_DATARATE_50_HZ:
      Serial.println("50 Hz");
      break;
    case AK09916_MAG_DATARATE_100_HZ:
      Serial.println("100 Hz");
      break;
  }
  Serial.println();

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // Initialize OLED display

  millis_old = millis();
}

void loop() {
  // Declare a variable 'accel' of type 'sensors_event_t' to store accelerometer data.
  sensors_event_t accel;
  // Declare a variable 'gyro' of type 'sensors_event_t' to store gyroscope data.
  sensors_event_t gyro;
  // Declare a variable 'mag' of type 'sensors_event_t' to store magnetometer data.
  sensors_event_t mag;
  // Declare a variable 'temp' of type 'sensors_event_t' to store temperature data.
  sensors_event_t temp;



  // Fetch the latest sensor events (accelerometer, gyroscope, magnetometer, and temperature)
  // from the ICM20948 sensor and store them in the previously declared variables.
  // The '&' operator is used to pass the address of the variable, meaning you're passing
  // a reference to the variable so that 'getEvent()' can modify the original.
  icm.getEvent(&accel, &gyro, &temp, &mag);

  //Serial.print("\t\tTemperature ");
  //Serial.print(temp.temperature);
  //Serial.println(" deg C");

  //Serial.print("\t\tAccel X: ");
  //Serial.print(accel.acceleration.x);
  //Serial.print(" \tY: ");
  //Serial.print(accel.acceleration.y);
  //Serial.print(" \tZ: ");
  //Serial.print(accel.acceleration.z);
  //Serial.println(" m/s^2 ");

  //Serial.print("\t\tMag X: ");
  //Serial.print(mag.magnetic.x);
  //Serial.print(" \tY: ");
  //Serial.print(mag.magnetic.y);
  //Serial.print(" \tZ: ");
  //Serial.print(mag.magnetic.z);
  //Serial.println(" uT");

  //Serial.print("\t\tGyro X: ");
  //Serial.print(gyro.gyro.x);
  //Serial.print(" \tY: ");
  //Serial.print(gyro.gyro.y);
  //Serial.print(" \tZ: ");
  //Serial.print(gyro.gyro.z);
  //Serial.println(" radians/s ");
  //Serial.println();

  delay(100);

  // Read accelerometer values from the ICM20948 sensor
  float accelerationX = accel.acceleration.x ;
  float accelerationY = accel.acceleration.y ;
  float accelerationZ = accel.acceleration.z ;

  //read gyro values from ICM20948 sensor


  pitch = -atan2(accel.acceleration.x / 9.8, accel.acceleration.z / 9.8) / 2 / 3.141592654 * 360;
  roll = -atan2(accel.acceleration.y / 9.8, accel.acceleration.z / 9.8) / 2 / 3.141592654 * 360;
  
  pitchFiltered_new = old_weight*pitchFiltered_old + new_weight*pitch;
  rollFiltered_new = old_weight*rollFiltered_old + new_weight*roll;

  dt=(millis()-millis_old)/1000.;
  millis_old=millis();

  pitchG = pitchG + gyro.gyro.y*dt;
  rollG = rollG + gyro.gyro.x*dt;

  //Serial.print("Pitch: ");
  //Serial.println(pitch);
  //Serial.print(" ");
  //Serial.println(roll);

  Serial.println(pitchFiltered_new);
  Serial.print(" ");
  Serial.println(rollFiltered_new);

  pitchFiltered_old = pitchFiltered_new;
  rollFiltered_old = rollFiltered_new;

  //Serial.println(pitchG);
  //Serial.print(" ");
  //Serial.println(rollG);  

  // Display accelerometer values on OLED display
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Acc X: ");
  display.println(accelerationX);
  display.print("Acc Y: ");
  display.println(accelerationY);
  display.print("Acc Z: ");
  display.println(accelerationZ);
  display.display();



  delay(100);  // Delay between readings
}
